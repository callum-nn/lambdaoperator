""" This code is to obtain the Coefficient Constraints for n qubit Gaussian states. In the first few lines, specify what the size 'n' of the system is. Then specify the type of constraint - ie a bilinear form in 'constraintlength' terms will be a quadratic polynomial with this many terms. If (this is more the case for smaller qubit systems) you want to do the whole calculation of all constraints in one go, in line 76 change 
<<constraints = succinctlambda[:,:]*symvec>> into <<constraints = lambdaoperator[:,:]*symvec>>. The code outputs directly to Mathematica Formatting to allow for easy simplification. """

n = 8; constraintlength = 4


%matplotlib inline
import numpy as np
from qutip import *
from qutip.qip.operations import *
from qutip.qip.circuit import QubitCircuit, Gate
import sympy as sp
from sympy.solvers import solve
from sympy import Symbol
from sympy.physics.quantum import TensorProduct


def jordanwigner(j,n):
# n is circuit width
    listofmg = []
    if j%2 == 0:
        k = int(j/2);
        for i in range(k-1):
            listofmg.append(sigmaz())
        listofmg.append(sigmay())
        for i in range(n-k):
            listofmg.append(identity(2))
    elif j%2 == 1:
        k = int((j+1)/2); 
        for i in range(k-1):
            listofmg.append(sigmaz())
        listofmg.append(sigmax())
        for i in range(n-k):
            listofmg.append(identity(2))
    else: print('error')
    overallmg = listofmg[0]
    for k in range(1,len(listofmg)):
        overallmg = tensor(overallmg,listofmg[k])
    return overallmg

def parityOf(integer):
    nlist = [int(d) for d in "{0:b}".format(integer)]
    parity = np.sum(nlist) % 2
    return(parity)


lambdaoperator = tensor(qzero(2),qzero(2))
for i in range(n-2):
	lambdaoperator = tensor(qzero(2),lambdaoperator)
lambdaoperator = tensor(lambdaoperator,lambdaoperator)

for i in range(2*n):
    lambdaoperator = lambdaoperator + tensor(jordanwigner(i+1,n),jordanwigner(i+1,n))

nvector = sp.symarray('b', 2**(n-1))
nfermionicstate = np.array([0 for i in range(2**n)], dtype = object)
counter = -1
for i in range(2**n):
    if parityOf(i)==0:
        counter = counter+1
        nfermionicstate[i] = nvector[counter]
symvec = TensorProduct(nfermionicstate, nfermionicstate)
symvec = np.transpose(symvec)

rowlist = []
for i in range(2**(2*n)):
    if np.count_nonzero(lambdaoperator[i,:]) == constraintlength:
        rowlist.append(i)

succinctlambda = np.zeros((len(rowlist),2**(2*n)), dtype = complex)
for i in range(len(rowlist)):
    succinctlambda[i,:] = lambdaoperator[rowlist[i],:]

constraints = succinctlambda[:,:]*symvec
for i in range(2 ** (n+3)):
    if np.sum(constraints[i,:])!=0:
        mathematicaconstraint = str(np.sum(constraints[i,:])).replace('b_', 'Subscript[b, ')
        mathematicaconstraint = mathematicaconstraint.replace(' 0*S', ' 0]*S')
        mathematicaconstraint = mathematicaconstraint.replace('1*S', '1]*S')
        mathematicaconstraint = mathematicaconstraint.replace('2*S', '2]*S')
        mathematicaconstraint = mathematicaconstraint.replace('3*S', '3]*S')
        mathematicaconstraint = mathematicaconstraint.replace('4*S', '4]*S')
        mathematicaconstraint = mathematicaconstraint.replace('5*S', '5]*S')
        mathematicaconstraint = mathematicaconstraint.replace('6*S', '6]*S')
        mathematicaconstraint = mathematicaconstraint.replace('7*S', '7]*S')
        mathematicaconstraint = mathematicaconstraint.replace('8*S', '8]*S')
        mathematicaconstraint = mathematicaconstraint.replace('9*S', '9]*S')
        mathematicaconstraint = mathematicaconstraint.replace(' + ', '] + ')
        mathematicaconstraint = mathematicaconstraint.replace(' - ', '] - ')
        print(mathematicaconstraint, '] == 0 &&')
