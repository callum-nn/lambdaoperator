# this code uses SYMPY to obtain constraints on the coefficients of the associated vectors of GFS.
# to change the number of qubits in the system, rmb to change n and to add copies of qzero(2) as tensor products

%matplotlib inline
import numpy as np
from qutip import *
from qutip.qip.operations import *
from qutip.qip.circuit import QubitCircuit, Gate
import sympy as sp
from sympy.solvers import solve
from sympy import Symbol
from sympy.physics.quantum import TensorProduct


# function definitions

def matchgate(vector):
    mat = tensor((1j*vector[2]*sigmaz()).expm(),(1j*vector[3]*sigmaz()).expm()) * (1j*(vector[4]*tensor(sigmax(),sigmax()) + vector[5]*tensor(sigmay(),sigmay()))).expm() * tensor((1j*vector[0]*sigmaz()).expm(),(1j*vector[1]*sigmaz()).expm())
    return Qobj(mat, dims=[[2, 2], [2, 2]])

def gabmatchgate(A,B):
    mat = np.zeros((4, 4), dtype=np.complex)
    mat[0,0] = A[0,0]; mat[0,3] = A[0,1]; mat[1,1] = B[0,0]; mat[1,2] = B[0,1]
    mat[2,1] = B[1,0]; mat[2,2] = B[1,1]; mat[3,0] = A[1,0]; mat[3,3] = A[1,1];
    return Qobj(mat, dims=[[2, 2], [2, 2]])

def jordanwigner(j,n):
# n is circuit width
    listofmg = []
    if j%2 == 0:
        k = int(j/2);
        for i in range(k-1):
            listofmg.append(sigmaz())
        listofmg.append(sigmay())
        for i in range(n-k):
            listofmg.append(identity(2))
    elif j%2 == 1:
        k = int((j+1)/2); 
        for i in range(k-1):
            listofmg.append(sigmaz())
        listofmg.append(sigmax())
        for i in range(n-k):
            listofmg.append(identity(2))
    else: print('error')
    overallmg = listofmg[0]
    for k in range(1,len(listofmg)):
        overallmg = tensor(overallmg,listofmg[k])
#    print(len(listofmg))
#    print(listofmg)
    return overallmg

def parityOf(integer):
    nlist = [int(d) for d in "{0:b}".format(integer)]
    parity = np.sum(nlist) % 2
    return(parity)


# Parameters: make sure you change these variables and add n copies of qzero to lambdaoperator tensor product
n = 6
lambdaoperator = tensor(qzero(2),qzero(2),qzero(2),qzero(2),qzero(2),qzero(2)); lambdaoperator = tensor(lambdaoperator,lambdaoperator)

# Working Code
cwidth=n;
for i in range(2*cwidth):
    lambdaoperator = lambdaoperator + tensor(jordanwigner(i+1,cwidth),jordanwigner(i+1,cwidth))
    #print(lambdaoperator)
print([i+1 for i in range(2*cwidth)])

nvector = sp.symarray('b', 2**(n-1))
nfermionicstate = np.array([0 for i in range(2**n)], dtype = object)
counter = -1
for i in range(2**n):
    if parityOf(i)==0:
        counter = counter+1
        nfermionicstate[i] = nvector[counter]
symvec = TensorProduct(nfermionicstate, nfermionicstate)
symvec = np.transpose(symvec)

constraints = lambdaoperator[:,:]*symvec
for i in range(2 ** (n+3)):
    if np.sum(constraints[i,:])!=0:
        print(np.sum(constraints[i,:]))
		
# each entry in the printed table is set equal to zero and this is the constraint required.
